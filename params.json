{
  "name": "HinetScripts",
  "tagline": "Python scripts for Hi-net data request, download and process",
  "body": "This project contains Python scripts to request, download and process continuous waveform data \r\navaiable from [NIED Hi-net][] website.\r\n\r\n## Dependency ##\r\n\r\n- Python 3.3+\r\n- Python modules: [requests](http://docs.python-requests.org), [clint](https://github.com/kennethreitz/clint), [docopt](http://docopt.org/)\r\n- Hinet [win32tools][]: `catwin32` and `win2sac_32` in your `PATH`\r\n\r\n## How to get ##\r\n\r\n- Git users: `git clone https://github.com/seisman/HinetScripts.git`\r\n  \r\n- Other users: [Download ZIP](https://github.com/seisman/HinetScripts/archive/master.zip)\r\n\r\n## Before you use it ##\r\n\r\n1. Make sure your Python version >= 3.3\r\n2. Install Python third-party modules by `pip install -r requirements.txt`\r\n3. Register on the [NIED Hi-net][] website, so that you have access to NIED\r\n   waveform data\r\n4. Download [win32tools][] and compile it, make sure binary `catwin32` and\r\n   `win2sac_32` are in you PATH\r\n5. Request, download and process data **manually** at least one time, make sure\r\n   that you know the whole procedures and limitations of NIED website\r\n6. Modify `User` and `Password` in configure file `Hinet.cfg`\r\n7. Run `HinetDoctor.py` to check your configure file\r\n\r\nIf you can read Chinese, [posts](http://seisman.info/hinet-things.html) listed\r\nin my blog may help you understand details.\r\n\r\n如果你能读懂中文，我博客列出的一些 [博文](http://seisman.info/hinet-things.html)\r\n会帮助你更好地理解其中的细节。部分博文未及时更新，若有冲突，请以本文为准。\r\n\r\n## Quick Start ##\r\n\r\nThis quick start example, shows how to request waveform data from\r\n2010:10:01T15:00:00(+0900) to 2010:10:01T15:20:00(+0900):\r\n\r\n```\r\n$ python HinetDoctor.py\r\n$ python HinetContRequest.py 2010 10 01 15 00 20 -d 201010010600\r\n$ python rdhinet.py 201010010600\r\n$ python ch2pz.py 201010010600\r\n```\r\n\r\nIf everything goes right, you will have one cnt file, one channel table file,\r\nseveral SAC files and SAC polezero files under directory `201010010600`.\r\n\r\n## Scripts ##\r\n\r\n### HinetDoctor.py ###\r\n\r\n`HinetDoctor.py` checks whether your configures goes right, you should run it\r\neverytime after you modify `Hinet.cfg`.\r\n\r\nChecklist: \r\n\r\n1. Python version >= 3.3\r\n2. All third-party modules installed\r\n3. Correct username and password\r\n4. Version of Hi-net website\r\n5. Binary `catwin32` and `win2sac_32` in PATH and executable\r\n6. Number of stations selected for Hi-net and F-net\r\n7. `Maxspan` in allowed range\r\n\r\n### StationSelector.py ###\r\n\r\n`StationSelector.py` is used to select stations you want to request data.\r\nIn most cases, you should use the web version provided by Hi-net website.\r\nThis script is only for people who need to change stations frequently.\r\n\r\n#### Usage ####\r\n\r\n```\r\nSelect Hi-net/F-net stations to request waveform data from NIED\r\n\r\nUsage:\r\n    StationSelector.py -c CODE [-l LIST]\r\n    StationSelector.py -h\r\n\r\nOptions:\r\n    -h, --help              Show this help.\r\n    -c CODE, --code=CODE    Network code. Hi-net: 0101, F-net: 0103.\r\n    -l LIST, --list=LIST    Station list file.\r\n```\r\n\r\n#### Notes ####\r\n\r\n1. You can only select stations of Hi-net or F-net.\r\n2. All stations will be selected if `-l` options is **NOT** used.\r\n3. List file contains station list, one station per line, lines start with `#` will be ignored.\r\n4. This script does **NOT** check whether a station belongs to a network.\r\n5. You may need to run `HinetDoctor.py` again to check your station selection.\r\n\r\n#### Examples ####\r\n\r\n1. Select all stations of Hi-net\r\n\r\n   ```\r\n   $ python StationSelector.py -c 0101\r\n   ```\r\n\r\n2. Select several stations list in a file:\r\n\r\n   ```\r\n   $ cat sta.list\r\n   N.FJ2H\r\n   N.OTWH\r\n   N.IICH\r\n   N.SMGH\r\n   $ python StationSelector.py -c 0101 -l sta.list\r\n   ```\r\n\r\n### HinetContRequest.py ###\r\n\r\n`HinetContRequest.py` is used to request and download data from NIED server.\r\n\r\n#### Usage ####\r\n\r\n```\r\n$ python HinetContRequest.py -h\r\nRequest continuous waveform data from NIED Hi-net.\r\n\r\nUsage:\r\n    HinetContRequest.py <year> <month> <day> <hour> <min> <span> [options]\r\n    HinetContRequest.py -h\r\n\r\nArguments for continuous waveform data:\r\n    <year>, <month>, <day>, <hour>, <min>: Starting time in JST time.\r\n    <span>:                                Duration in minutes.\r\n\r\nOptions:\r\n    -h, --help              Show this help.\r\n    -c CODE --code=CODE     Select code for organization and network.\r\n    -m SPAN --maxspan=SPAN  Max time span for sub-requests\r\n    -d DIR --directory=DIR  Output directory. Default: current directory.\r\n    -o FILE --output=FILE   Output filename.\r\n                            Default: CODE_YYYYMMDDHHMM_SPAN.cnt\r\n    -t FILE --ctable=FILE   Channel table filename. Default: CODE_YYYYMMDD.ch\r\n```\r\n\r\n#### Examples ####\r\n\r\n1.  Request data of Hi-net starting from 2010-10-01T15:00:00 (**JST**)\r\n    with duration of 20 minutes:\r\n\r\n        python HinetContRequest.py 2010 10 01 15 00 20\r\n\r\n2.  Request data of F-net starting from 2010-10-01T15:00:00 (**JST**)\r\n    with duration of 20 minutes\r\n\r\n        python HinetContRequest.py 2010 10 01 15 00 20 -c 0103\r\n\r\n3.  Request data of Hi-net, with customized output directory. (**Highly Recommended**)\r\n\r\n        python HinetContRequest.py 2010 10 01 15 00 20 -d 201010010600\r\n\r\n4.  Request data of Hi-net, with customized output directory and filename\r\n\r\n        python HinetContRequest.py 2010 10 01 15 00 20 -d aaa -o aaa.cnt -t aaa.ch\r\n\r\nIf you run `HinetContRequest.py` in the highly recommender way (Example 3),\r\nyou will get a directory `201010010600` with two file inside:\r\n`0101_201010011500_20.cnt` and `0101_20101001.ch`.\r\n\r\n    |-- 201010010600\r\n        |-- 0101_201010011500_20.cnt\r\n        `-- 0101_20101001.ch\r\n\r\n#### Notes ####\r\n\r\n1. Starting time is in JST, which is UTC+09:00, nine hour ahead of UTC.\r\n2. `<span>` is in minutes.\r\n3. Options `-o` and `-t` allow you customizing output filenames.\r\n   Since the filename format of cnt file and channel tables are\r\n   hard coded in `rdhinet.py` and `ch2pz.py`, you should **NEVER**\r\n   use these two options unless you are able to modify the source code.\r\n\r\n### rdhinet.py ###\r\n\r\n`rdhinet.py` is used to extract SAC files from WIN32 file.\r\n\r\n#### Usage ####\r\n\r\n```\r\nExtract SAC data files from NIED Hi-net WIN32 files\r\n\r\nUsage:\r\n    rdhinet.py DIRNAME [-C <comps>] [-D <outdir>] [-S <suffix>] [-P <procs>]\r\n    rdhinet.py -h\r\n\r\nOptions:\r\n    -h          Show this help.\r\n    -C <comps>  Components to extract, delimited using commas.\r\n                Avaiable components are U, N, E, X, Y et al.\r\n                Default to extract all components.\r\n    -D <outdir> Output directory for SAC files.\r\n    -S <suffix> Suffix of output SAC files. Default: no suffix.\r\n    -P <procs>  Parallel using multiple processes.\r\n                Set number of CPUs to <procs> if <procs> equals 0. [default: 0]\r\n```\r\n\r\n#### Examples ####\r\n\r\n1.  Extract all channels\r\n\r\n        python rdhinet.py 201010010600\r\n\r\n2.  Extract NEU components with suffix 'SAC'\r\n\r\n        python rdhinet.py 201010010600 -C U,N,E -S SAC\r\n\r\nIn most cases, what you need is only `-C` option.\r\n\r\nIf you run `python rdhinet.py 201010010600 -C U`, you will get SAC files\r\nlooks like `N.FRNH.U` under directory `201010010600`.\r\n\r\n### ch2py.py ###\r\n\r\n`ch2pz.py` is used to extract SAC PZ files from Channel Table file.\r\n\r\n#### Attentions ####\r\n\r\n- `ch2pz.py` only works for components whose input unit is `m/s`.\r\n- `ch2pz.py` may only works for Hi-net short period instruments.\r\n- `ch2pz.py` does **NOT** work for F-net.\r\n\r\n#### Usage ####\r\n\r\n```\r\n$ python ch2pz.py -h\r\nConvert NIED Hi-net Channel Table file to SAC PZ files\r\n\r\nUsage:\r\n    ch2pz.py DIRNAME [-C <comps>] [-D <outdir>] [-S <suffix>]\r\n\r\nOptions:\r\n    -C <comps>    Channel Components to convert. Choose from U,N,E,X,Y et. al.\r\n                  Default to convert all components.\r\n    -D <outdir>   Output directory of SAC PZ files. Use the directory of\r\n                  Channel Table file as default.\r\n    -S <suffix>   Suffix for SAC PZ files. [default: SAC_PZ]\r\n```\r\n\r\n#### Examples ####\r\n\r\n1.  Extract all channels\r\n\r\n        python ch2pz.py 201010010600\r\n\r\n2.  Extract NEU components\r\n\r\n        python ch2pz.py 201010010600 -C U,N,E\r\n\r\nIn most cases, what you need is only `-C` option.\r\n\r\nIf you run `python ch2pz.py 201010010600 -C U`, you will get SAC PoleZero\r\nfiles looks like `N.FRNH.U.SAC_PZ` under directory `201010010600`.\r\n\r\n## FAQ ##\r\n\r\n### What is network code? ###\r\n\r\nEach network is represented by a network code. For example, Hi-net \r\nnetwork has a code of `0101`, while V-net `0105`. You can see the full\r\ncode list by running `python HinetContRequest.py -h`.\r\n\r\n### What is Maxspan? And how to choose it? ###\r\n\r\nNIED Hi-net website sets a limitation of data size in one request:\r\n\r\n1. Record Length <= 60 min\r\n2. Number of channels * Record Length <= 12000 min\r\n\r\nJust take Hi-net as example, Hi-net network has about 800 station and\r\n24000 channels. According to the limitations, the record length should\r\nbe no more than 5 minutes long in one web request. So the `Maxspan`,\r\nallowed maximum record length, should be no more than 5 for Hi-net\r\nnetwork with all stations selected.\r\n\r\nThe request script `HinetContRequest.py` helps you break through the\r\nlimitation. Using this script, you can requst datas with a much longer\r\nrecord length, this script will split the request into multiple\r\nsub-requests, each has a record length no more than `Maxspan` minutes.\r\n\r\n### What's the workflow of HinetContRequest.py? ###\r\n\r\n1. read configure file\r\n2. login Hi-net website\r\n3. check whether starting time is in service period\r\n4. if `<span>` is larger than `MaxSpan`, split this request into multiple\r\n   sub-requests, each has a duration no larger than `MaxSpan`\r\n5. start the first sub-request, wait until the data is ready, then\r\n   remember the ID\r\n6. repeat step 5 for all sub-requests, and remember all IDs\r\n7. download all datas in zip format\r\n8. unzip all zip files, merge all cnt files into one cnt file\r\n9. rename and cleanup\r\n\r\n### What's MaxSleepCount and SleepTime? ###\r\n\r\nAfter posting a data request, Hi-net server will deal with this request and\r\nprepare waveform data. During the preparation, user is not allowed to post\r\nanother new request. So user has to wait until the data is ready.\r\n\r\nThe script will check the status of data preparation. If the data is not ready,\r\nit will sleep for `SleepTime` seconds, and then check the status again, until\r\nthe data is ready or the number of checks larger than `MaxSleepCount`.\r\n\r\nSo the maximum sleep time for one request is MaxSleepCount\\*SleepTime seconds,\r\nif the data is still not ready, the script will report an error.\r\n\r\n## License\r\n\r\nThis project is licensed under the terms of the MIT license.\r\n\r\n[win32tools]: https://hinetwww11.bosai.go.jp/auth/manual/dlDialogue.php?r=win32tools\r\n[NIED Hi-net]: http://www.hinet.bosai.go.jp",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}